// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package proto

import (
	"context"
	"github.com/micro/go-micro/v2/client"
	"google.golang.org/protobuf/types/known/emptypb"
	"sync"
)

// Ensure, that AccountsServiceMock does implement AccountsService.
// If this is not the case, regenerate this file with moq.
var _ AccountsService = &AccountsServiceMock{}

// AccountsServiceMock is a mock implementation of AccountsService.
//
//     func TestSomethingThatUsesAccountsService(t *testing.T) {
//
//         // make and configure a mocked AccountsService
//         mockedAccountsService := &AccountsServiceMock{
//             CreateAccountFunc: func(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*Account, error) {
// 	               panic("mock out the CreateAccount method")
//             },
//             DeleteAccountFunc: func(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
// 	               panic("mock out the DeleteAccount method")
//             },
//             GetAccountFunc: func(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*Account, error) {
// 	               panic("mock out the GetAccount method")
//             },
//             ListAccountsFunc: func(ctx context.Context, in *ListAccountsRequest, opts ...client.CallOption) (*ListAccountsResponse, error) {
// 	               panic("mock out the ListAccounts method")
//             },
//             UpdateAccountFunc: func(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*Account, error) {
// 	               panic("mock out the UpdateAccount method")
//             },
//         }
//
//         // use mockedAccountsService in code that requires AccountsService
//         // and then make assertions.
//
//     }
type AccountsServiceMock struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*Account, error)

	// DeleteAccountFunc mocks the DeleteAccount method.
	DeleteAccountFunc func(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*emptypb.Empty, error)

	// GetAccountFunc mocks the GetAccount method.
	GetAccountFunc func(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*Account, error)

	// ListAccountsFunc mocks the ListAccounts method.
	ListAccountsFunc func(ctx context.Context, in *ListAccountsRequest, opts ...client.CallOption) (*ListAccountsResponse, error)

	// UpdateAccountFunc mocks the UpdateAccount method.
	UpdateAccountFunc func(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *CreateAccountRequest
			// Opts is the opts argument value.
			Opts []client.CallOption
		}
		// DeleteAccount holds details about calls to the DeleteAccount method.
		DeleteAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *DeleteAccountRequest
			// Opts is the opts argument value.
			Opts []client.CallOption
		}
		// GetAccount holds details about calls to the GetAccount method.
		GetAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetAccountRequest
			// Opts is the opts argument value.
			Opts []client.CallOption
		}
		// ListAccounts holds details about calls to the ListAccounts method.
		ListAccounts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *ListAccountsRequest
			// Opts is the opts argument value.
			Opts []client.CallOption
		}
		// UpdateAccount holds details about calls to the UpdateAccount method.
		UpdateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *UpdateAccountRequest
			// Opts is the opts argument value.
			Opts []client.CallOption
		}
	}
	lockCreateAccount sync.RWMutex
	lockDeleteAccount sync.RWMutex
	lockGetAccount    sync.RWMutex
	lockListAccounts  sync.RWMutex
	lockUpdateAccount sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *AccountsServiceMock) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*Account, error) {
	if mock.CreateAccountFunc == nil {
		panic("AccountsServiceMock.CreateAccountFunc: method is nil but AccountsService.CreateAccount was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *CreateAccountRequest
		Opts []client.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	return mock.CreateAccountFunc(ctx, in, opts...)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//     len(mockedAccountsService.CreateAccountCalls())
func (mock *AccountsServiceMock) CreateAccountCalls() []struct {
	Ctx  context.Context
	In   *CreateAccountRequest
	Opts []client.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *CreateAccountRequest
		Opts []client.CallOption
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// DeleteAccount calls DeleteAccountFunc.
func (mock *AccountsServiceMock) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	if mock.DeleteAccountFunc == nil {
		panic("AccountsServiceMock.DeleteAccountFunc: method is nil but AccountsService.DeleteAccount was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *DeleteAccountRequest
		Opts []client.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeleteAccount.Lock()
	mock.calls.DeleteAccount = append(mock.calls.DeleteAccount, callInfo)
	mock.lockDeleteAccount.Unlock()
	return mock.DeleteAccountFunc(ctx, in, opts...)
}

// DeleteAccountCalls gets all the calls that were made to DeleteAccount.
// Check the length with:
//     len(mockedAccountsService.DeleteAccountCalls())
func (mock *AccountsServiceMock) DeleteAccountCalls() []struct {
	Ctx  context.Context
	In   *DeleteAccountRequest
	Opts []client.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *DeleteAccountRequest
		Opts []client.CallOption
	}
	mock.lockDeleteAccount.RLock()
	calls = mock.calls.DeleteAccount
	mock.lockDeleteAccount.RUnlock()
	return calls
}

// GetAccount calls GetAccountFunc.
func (mock *AccountsServiceMock) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*Account, error) {
	if mock.GetAccountFunc == nil {
		panic("AccountsServiceMock.GetAccountFunc: method is nil but AccountsService.GetAccount was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetAccountRequest
		Opts []client.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetAccount.Lock()
	mock.calls.GetAccount = append(mock.calls.GetAccount, callInfo)
	mock.lockGetAccount.Unlock()
	return mock.GetAccountFunc(ctx, in, opts...)
}

// GetAccountCalls gets all the calls that were made to GetAccount.
// Check the length with:
//     len(mockedAccountsService.GetAccountCalls())
func (mock *AccountsServiceMock) GetAccountCalls() []struct {
	Ctx  context.Context
	In   *GetAccountRequest
	Opts []client.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetAccountRequest
		Opts []client.CallOption
	}
	mock.lockGetAccount.RLock()
	calls = mock.calls.GetAccount
	mock.lockGetAccount.RUnlock()
	return calls
}

// ListAccounts calls ListAccountsFunc.
func (mock *AccountsServiceMock) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...client.CallOption) (*ListAccountsResponse, error) {
	if mock.ListAccountsFunc == nil {
		panic("AccountsServiceMock.ListAccountsFunc: method is nil but AccountsService.ListAccounts was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *ListAccountsRequest
		Opts []client.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockListAccounts.Lock()
	mock.calls.ListAccounts = append(mock.calls.ListAccounts, callInfo)
	mock.lockListAccounts.Unlock()
	return mock.ListAccountsFunc(ctx, in, opts...)
}

// ListAccountsCalls gets all the calls that were made to ListAccounts.
// Check the length with:
//     len(mockedAccountsService.ListAccountsCalls())
func (mock *AccountsServiceMock) ListAccountsCalls() []struct {
	Ctx  context.Context
	In   *ListAccountsRequest
	Opts []client.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *ListAccountsRequest
		Opts []client.CallOption
	}
	mock.lockListAccounts.RLock()
	calls = mock.calls.ListAccounts
	mock.lockListAccounts.RUnlock()
	return calls
}

// UpdateAccount calls UpdateAccountFunc.
func (mock *AccountsServiceMock) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*Account, error) {
	if mock.UpdateAccountFunc == nil {
		panic("AccountsServiceMock.UpdateAccountFunc: method is nil but AccountsService.UpdateAccount was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *UpdateAccountRequest
		Opts []client.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdateAccount.Lock()
	mock.calls.UpdateAccount = append(mock.calls.UpdateAccount, callInfo)
	mock.lockUpdateAccount.Unlock()
	return mock.UpdateAccountFunc(ctx, in, opts...)
}

// UpdateAccountCalls gets all the calls that were made to UpdateAccount.
// Check the length with:
//     len(mockedAccountsService.UpdateAccountCalls())
func (mock *AccountsServiceMock) UpdateAccountCalls() []struct {
	Ctx  context.Context
	In   *UpdateAccountRequest
	Opts []client.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *UpdateAccountRequest
		Opts []client.CallOption
	}
	mock.lockUpdateAccount.RLock()
	calls = mock.calls.UpdateAccount
	mock.lockUpdateAccount.RUnlock()
	return calls
}
